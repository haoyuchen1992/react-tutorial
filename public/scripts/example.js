/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


var OnlineUserAvatar = React.createClass({
  render: function() {
    return (
      <div className="avatar-chat">
        <img src={this.props.avatarURL} /> 
      </div>
    );
  }
});

var OnlineUserList = React.createClass({
  render: function() {
    var onlineUserListNode = this.props.data.map(function(user) {
      return (
        <OnlineUserAvatar avatarURL={user.avatarURL} key={user.id} />
      );
    });
    return (
      <div className="online-user-list">
        {onlineUserListNode}
      </div>
    );
  }  
});


var ChatRecord = React.createClass({
  render: function() {
    return (
      <li className = {this.props.data.selfChat ? "self-chat" : "others-chat"} 
          profile-img-url = {"url:(" + this.props.data.avatarURL + ")"} >
              {this.props.data.body}
      </li>
    );
  }  
});

var ChatRecordsList = React.createClass({
  render: function() {
    var chatRecordsNodes = this.props.data.map(function(record) {
      return (
          <ChatRecord data={record} key={record.id} />
      );
    });

    return (
      <ul className="chat-thread">
          {chatRecordsNodes}
      </ul>
    );
  }  
});

var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <h2 className="commentAuthor">
          {this.props.author}
        </h2>
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  loadUsersFromServer: function () {
    $.ajax({
      url: '/api/users',
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({onlineUsersData: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error('/api/users', status, err.toString());
      }.bind(this)
    });
  },
  loadChatRecordsFromServer: function () {
    $.ajax({
      url: '/api/chatrecords',
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({chatRecordsData: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error('/api/chatrecords', status, err.toString());
      }.bind(this)
    });
  },  
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: [], onlineUsersData: [], chatRecordsData: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    this.loadUsersFromServer();
    this.loadChatRecordsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    setInterval(this.loadUsersFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
        <OnlineUserList data={this.state.onlineUsersData} />
        <ChatRecordsList data={this.state.chatRecordsData} />
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('content')
);
